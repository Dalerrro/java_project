import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Properties;
import java.io.InputStream;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.File;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
 */
public class TelegramSender {
    private static final String CONFIG_FILE = "telegram.properties";
    private static String BOT_TOKEN;
    private static String CHAT_ID;
    private static boolean ENABLED = true;
    private static String LANGUAGE = "ru";
    private static String MESSAGE_FORMAT = "detailed";

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–ª–∞—Å—Å–∞
    static {
        loadConfiguration();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    public static void loadConfiguration() {
        Properties props = new Properties();
        File configFile = new File(CONFIG_FILE);
        try {
            if (configFile.exists()) {
                try (FileInputStream fis = new FileInputStream(configFile)) {
                    props.load(fis);
                    BOT_TOKEN = props.getProperty("telegram.bot.token");
                    CHAT_ID = props.getProperty("telegram.chat.id");
                    ENABLED = Boolean.parseBoolean(props.getProperty("telegram.enabled", "true"));
                    LANGUAGE = props.getProperty("telegram.language", "ru");
                    MESSAGE_FORMAT = props.getProperty("telegram.format", "detailed");
                }
            } else {
                // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                props.setProperty("telegram.bot.token", "7763857597:AAFB3eIcwlbBmCnBIT1WbkrjsdvupalqC1w");
                props.setProperty("telegram.chat.id", "390304506");
                props.setProperty("telegram.enabled", "true");
                props.setProperty("telegram.language", "ru");
                props.setProperty("telegram.format", "detailed");
                try (FileOutputStream fos = new FileOutputStream(configFile)) {
                    props.store(fos, "Telegram Bot Configuration");
                }
                BOT_TOKEN = props.getProperty("telegram.bot.token");
                CHAT_ID = props.getProperty("telegram.chat.id");
            }
        } catch (IOException e) {
            System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram: " + e.getMessage());
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
     */
    public static void updateConfiguration(String botToken, String chatId, boolean enabled, String language, String format) {
        Properties props = new Properties();
        props.setProperty("telegram.bot.token", botToken);
        props.setProperty("telegram.chat.id", chatId);
        props.setProperty("telegram.enabled", String.valueOf(enabled));
        props.setProperty("telegram.language", language);
        props.setProperty("telegram.format", format);
        try (FileOutputStream fos = new FileOutputStream(CONFIG_FILE)) {
            props.store(fos, "Telegram Bot Configuration");
            BOT_TOKEN = botToken;
            CHAT_ID = chatId;
            ENABLED = enabled;
            LANGUAGE = language;
            MESSAGE_FORMAT = format;
            System.out.println("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
        } catch (IOException e) {
            System.err.println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " + e.getMessage());
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
     */
    public static void send(String message) {
        if (!ENABLED) {
            System.out.println("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã");
            return;
        }
        if (BOT_TOKEN == null || CHAT_ID == null) {
            System.err.println("Telegram –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω");
            return;
        }
        HttpURLConnection conn = null;
        try {
            String text = URLEncoder.encode(message, StandardCharsets.UTF_8);
            String urlString = String.format(
                "https://api.telegram.org/bot%s/sendMessage?chat_id=%s&text=%s&parse_mode=HTML",
                BOT_TOKEN, CHAT_ID, text
            );
            URL url = new URL(urlString);
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setConnectTimeout(5000);
            conn.setReadTimeout(10000);
            int code = conn.getResponseCode();
            if (code == HttpURLConnection.HTTP_OK) {
                System.out.println("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + message);
            } else {
                System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + code);
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: " + e.getMessage());
        } finally {
            if (conn != null) conn.disconnect();
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç
     */
    public static void sendAlert(String metric, double value, double threshold, String severity) {
        String emoji = severity.equals("critical") ? "üö®" : "‚ö†Ô∏è";
        String severityText = severity.equals("critical") ? "–ö–†–ò–¢–ò–ß–ù–û" : "–í–ù–ò–ú–ê–ù–ò–ï";
        String message;
        if (LANGUAGE.equals("ru")) {
            message = String.format(
                "%s <b>%s</b>\n\n" +
                "<b>–ú–µ—Ç—Ä–∏–∫–∞:</b> %s\n" +
                "<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> %.1f\n" +
                "<b>–ü–æ—Ä–æ–≥:</b> %.1f\n" +
                "<b>–í—Ä–µ–º—è:</b> %s\n",
                emoji, severityText, metric, value, threshold, new java.util.Date().toString()
            );
        } else {
            message = String.format(
                "%s <b>%s ALERT</b>\n\n" +
                "<b>Metric:</b> %s\n" +
                "<b>Current Value:</b> %.1f\n" +
                "<b>Threshold:</b> %.1f\n" +
                "<b>Time:</b> %s\n\n" +
                "System check required!",
                emoji, severityText, metric, value, threshold, new java.util.Date().toString()
            );
        }
        send(message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
     */
    public static void sendSystemStatus(double cpuUsage, double memoryUsage, double temperature, String uptime) {
        String statusEmoji = (cpuUsage > 80 || memoryUsage > 85 || temperature > 75) ? "‚ö†Ô∏è" : "‚úÖ";
        String message;
        if (MESSAGE_FORMAT.equals("brief")) {
            message = String.format(
                "%s CPU: %.1f%% | RAM: %.1f%% | Temp: %.1f¬∞C",
                statusEmoji, cpuUsage, memoryUsage, temperature
            );
        } else {
            if (LANGUAGE.equals("ru")) {
                message = String.format(
                    "%s <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n" +
                    "üìä <b>CPU:</b> %.1f%%\n" +
                    "üíæ <b>–ü–∞–º—è—Ç—å:</b> %.1f%%\n" +
                    "üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> %.1f¬∞C\n" +
                    "‚è∞ <b>Uptime:</b> %s\n\n" +
                    "<b>–í—Ä–µ–º—è:</b> %s",
                    statusEmoji, cpuUsage, memoryUsage, temperature, uptime, new java.util.Date().toString()
                );
            } else {
                message = String.format(
                    "%s <b>System Status</b>\n\n" +
                    "üìä <b>CPU:</b> %.1f%%\n" +
                    "üíæ <b>Memory:</b> %.1f%%\n" +
                    "üå°Ô∏è <b>Temperature:</b> %.1f¬∞C\n" +
                    "‚è∞ <b>Uptime:</b> %s\n\n" +
                    "<b>Time:</b> %s",
                    statusEmoji, cpuUsage, memoryUsage, temperature, uptime, new java.util.Date().toString()
                );
            }
        }
        send(message);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –±–æ—Ç
     */
    public static boolean isConfigured() {
        return BOT_TOKEN != null && CHAT_ID != null && !BOT_TOKEN.isBlank() && !CHAT_ID.isBlank();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
     */
    public static Properties getConfiguration() {
        Properties props = new Properties();
        props.setProperty("telegram.bot.token", BOT_TOKEN != null ? BOT_TOKEN : "");
        props.setProperty("telegram.chat.id", CHAT_ID != null ? CHAT_ID : "");
        props.setProperty("telegram.enabled", String.valueOf(ENABLED));
        props.setProperty("telegram.language", LANGUAGE);
        props.setProperty("telegram.format", MESSAGE_FORMAT);
        return props;
    }
}