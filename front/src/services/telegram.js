import settingsService from './settings';

class TelegramService {
  constructor() {
    this.lastAlertTime = {}; 
    this.lastAlertValue = {};
  }

  getConfig() {
    return settingsService.getTelegramSettings();
  }

  async sendMessage(message) {
    const config = this.getConfig();
    

    if (!settingsService.canSendNotification()) {
      console.log('Notifications are disabled or outside allowed time');
      return { success: false, error: 'Notifications disabled or outside allowed time' };
    }

    if (!config.botToken || !config.chatId) {
      console.error('Telegram bot not configured');
      return { success: false, error: 'Bot token or chat ID missing' };
    }

    const url = `https://api.telegram.org/bot${config.botToken}/sendMessage`;
    
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: config.chatId,
          text: message,
          parse_mode: 'HTML'
        })
      });

      const data = await response.json();
      
      if (data.ok) {
        console.log('Telegram message sent successfully');
        return { success: true, data };
      } else {
        console.error('Telegram API error:', data);
        return { success: false, error: data.description || 'Failed to send message' };
      }
    } catch (error) {
      console.error('Failed to send Telegram message:', error);
      return { success: false, error: error.message };
    }
  }

  async sendAlert(metric, value, threshold, severity = 'warning') {
    const config = this.getConfig();
    
    const alertKey = `${metric}_${severity}`;
    const now = Date.now();
    const lastTime = this.lastAlertTime[alertKey] || 0;
    const lastValue = this.lastAlertValue[alertKey] || 0;
    const cooldownMs = (config.alertCooldown || 300) * 1000;
    const significantChangeThreshold = config.significantChangeThreshold || 10; 

    if (
      severity === 'critical' || 
      Math.abs(value - lastValue) >= significantChangeThreshold || 
      now - lastTime >= cooldownMs 
    ) {
      const emoji = severity === 'critical' ? 'üö®' : '‚ö†Ô∏è';
      const severityText = severity === 'critical' ? '–ö–†–ò–¢–ò–ß–ù–û' : '–í–ù–ò–ú–ê–ù–ò–ï';
      
      let message;
      
      if (config.language === 'ru') {
        message = `${emoji} <b>${severityText}</b>\n\n` +
          `<b>–û–±—ä–µ–∫—Ç:</b> ${metric}\n` +
          `<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> ${value}\n` +
          `<b>–ü–æ—Ä–æ–≥:</b> ${threshold}\n` +
          `<b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}\n\n`;
      } else {
        message = `${emoji} <b>${severityText} ALERT</b>\n\n` +
          `<b>Metric:</b> ${metric}\n` +
          `<b>Current Value:</b> ${value}\n` +
          `<b>Threshold:</b> ${threshold}\n` +
          `<b>Time:</b> ${new Date().toLocaleString()}\n\n`;
      }

      const result = await this.sendMessage(message);
      
      if (result.success) {
        this.lastAlertTime[alertKey] = now;
        this.lastAlertValue[alertKey] = value; 
      }
      
      return result;
    } else {
      console.log(`Alert cooldown active or no significant change for ${alertKey}`);
      return { success: false, error: 'Cooldown active or no significant change' };
    }
  }

  async sendTestMessage() {
    const config = this.getConfig();
    
    let message;
    
    if (config.language === 'ru') {
      message = `‚úÖ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n` +
        `–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n` +
        `<b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}`;
    } else {
      message = `‚úÖ <b>Test Message</b>\n\n` +
        `This is a test message from your System Monitor.\n` +
        `If you receive this, Telegram integration is working correctly!\n\n` +
        `<b>Time:</b> ${new Date().toLocaleString()}`;
    }

    return this.sendMessage(message);
  }

  async sendSystemStatus(systemData) {
    const config = this.getConfig();
    const cpuUsage = systemData.currentMetrics?.cpuUsage || 0;
    const memoryUsage = systemData.currentMetrics?.memoryUsagePercent || 0;
    const temperature = systemData.sensorData?.cpuTemperature || 0;
    const uptime = systemData.staticInfo?.uptime || 'N/A';
    const cpuName = systemData.cpuDetails?.name || 'Unknown';
    const processes = systemData.staticInfo?.processes || 0;

    const statusEmoji = cpuUsage > 80 || memoryUsage > 85 || temperature > 75 ? '‚ö†Ô∏è' : '‚úÖ';
    
    let message;
    
    if (config.messageFormat === 'brief') {
      if (config.language === 'ru') {
        message = `${statusEmoji} CPU: ${cpuUsage.toFixed(1)}% | RAM: ${memoryUsage.toFixed(1)}% | Temp: ${temperature.toFixed(1)}¬∞C`;
      } else {
        message = `${statusEmoji} CPU: ${cpuUsage.toFixed(1)}% | RAM: ${memoryUsage.toFixed(1)}% | Temp: ${temperature.toFixed(1)}¬∞C`;
      }
    } else if (config.messageFormat === 'detailed' || config.messageFormat === 'full') {
      if (config.language === 'ru') {
        message = `${statusEmoji} <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n` +
          `<b>üíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b>\n` +
          `‚Ä¢ –ú–æ–¥–µ–ª—å: ${cpuName}\n` +
          `‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞: ${cpuUsage.toFixed(1)}%\n` +
          `‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: ${systemData.cpuDetails?.currentFrequency?.toFixed(2) || 0} GHz\n` +
          `‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature.toFixed(1)}¬∞C\n\n` +
          `<b>üíæ –ü–∞–º—è—Ç—å:</b>\n` +
          `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${memoryUsage.toFixed(1)}%\n` +
          `‚Ä¢ –ó–∞–Ω—è—Ç–æ: ${(systemData.currentMetrics?.memoryUsed / 1024 / 1024 / 1024).toFixed(1)} GB\n` +
          `‚Ä¢ –í—Å–µ–≥–æ: ${(systemData.currentMetrics?.memoryTotal / 1024 / 1024 / 1024).toFixed(1)} GB\n\n` +
          `<b>üìä –°–∏—Å—Ç–µ–º–∞:</b>\n` +
          `‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}\n` +
          `‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ–≤: ${processes}\n\n` +
          `<b>‚è∞ –í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}`;
      } else {
        message = `${statusEmoji} <b>System Status Report</b>\n\n` +
          `<b>üíª CPU:</b>\n` +
          `‚Ä¢ Model: ${cpuName}\n` +
          `‚Ä¢ Usage: ${cpuUsage.toFixed(1)}%\n` +
          `‚Ä¢ Frequency: ${systemData.cpuDetails?.currentFrequency?.toFixed(2) || 0} GHz\n` +
          `‚Ä¢ Temperature: ${temperature.toFixed(1)}¬∞C\n\n` +
          `<b>üíæ Memory:</b>\n` +
          `‚Ä¢ Usage: ${memoryUsage.toFixed(1)}%\n` +
          `‚Ä¢ Used: ${(systemData.currentMetrics?.memoryUsed / 1024 / 1024 / 1024).toFixed(1)} GB\n` +
          `‚Ä¢ Total: ${(systemData.currentMetrics?.memoryTotal / 1024 / 1024 / 1024).toFixed(1)} GB\n\n` +
          `<b>üìä System:</b>\n` +
          `‚Ä¢ Uptime: ${uptime}\n` +
          `‚Ä¢ Processes: ${processes}\n\n` +
          `<b>‚è∞ Time:</b> ${new Date().toLocaleString()}`;
      }
    }

    return this.sendMessage(message);
  }

  async sendDailyReport(stats) {
    const config = this.getConfig();
    
    let message;
    
    if (config.language === 'ru') {
      message = `üìä <b>–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç</b>\n\n` +
        `<b>CPU:</b>\n` +
        `‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞: ${stats.avgCpu.toFixed(1)}%\n` +
        `‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: ${stats.maxCpu.toFixed(1)}%\n\n` +
        `<b>–ü–∞–º—è—Ç—å:</b>\n` +
        `‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞: ${stats.avgMemory.toFixed(1)}%\n` +
        `‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: ${stats.maxMemory.toFixed(1)}%\n\n` +
        `<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b>\n` +
        `‚Ä¢ –°—Ä–µ–¥–Ω—è—è: ${stats.avgTemp.toFixed(1)}¬∞C\n` +
        `‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: ${stats.maxTemp.toFixed(1)}¬∞C\n\n` +
        `<b>–ê–ª–µ—Ä—Ç—ã:</b> ${stats.alertCount}\n\n` +
        `<b>–ü–µ—Ä–∏–æ–¥:</b> ${new Date().toLocaleDateString('ru-RU')}`;
    } else {
      message = `üìä <b>Daily Report</b>\n\n` +
        `<b>CPU:</b>\n` +
        `‚Ä¢ Average Load: ${stats.avgCpu.toFixed(1)}%\n` +
        `‚Ä¢ Maximum: ${stats.maxCpu.toFixed(1)}%\n\n` +
        `<b>Memory:</b>\n` +
        `‚Ä¢ Average Load: ${stats.avgMemory.toFixed(1)}%\n` +
        `‚Ä¢ Maximum: ${stats.maxMemory.toFixed(1)}%\n\n` +
        `<b>Temperature:</b>\n` +
        `‚Ä¢ Average: ${stats.avgTemp.toFixed(1)}¬∞C\n` +
        `‚Ä¢ Maximum: ${stats.maxTemp.toFixed(1)}¬∞C\n\n` +
        `<b>Alerts:</b> ${stats.alertCount}\n\n` +
        `<b>Period:</b> ${new Date().toLocaleDateString()}`;
    }

    return this.sendMessage(message);
  }
}

export default new TelegramService();